import re

class PHPVulnerabilityRules:
    def __init__(self):
        self.rules = self._initialize_rules()
    
    def _initialize_rules(self):
        return [
            # SQL Injection patterns
            {
                'type': 'sql_injection',
                'severity': 'critical',
                'pattern': re.compile(r'\$_(?:GET|POST|REQUEST|COOKIE)\s*\[\s*[\'"][^\'"]*[\'"]\s*\]\s*[^;]*(?:SELECT|INSERT|UPDATE|DELETE|DROP|CREATE)', re.IGNORECASE),
                'message': 'Potential SQL injection vulnerability',
                'description': 'Direct use of user input in SQL queries without proper sanitization',
                'remediation': 'Use prepared statements or parameterized queries. Sanitize and validate all user inputs.',
                'cwe_id': 'CWE-89',
                'owasp_category': 'A03:2021 – Injection'
            },
            {
                'type': 'sql_injection',
                'severity': 'high',
                'pattern': re.compile(r'mysql_query\s*\(\s*[\'"][^\'\"]*\$_(?:GET|POST|REQUEST)', re.IGNORECASE),
                'message': 'Direct SQL query with user input',
                'description': 'Using mysql_query with unsanitized user input',
                'remediation': 'Use PDO or mysqli with prepared statements',
                'cwe_id': 'CWE-89',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # XSS patterns
            {
                'type': 'xss',
                'severity': 'high',
                'pattern': re.compile(r'echo\s+\$_(?:GET|POST|REQUEST|COOKIE)', re.IGNORECASE),
                'message': 'Potential Cross-Site Scripting (XSS) vulnerability',
                'description': 'Direct output of user input without sanitization',
                'remediation': 'Use htmlspecialchars() or filter_var() to sanitize output',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },
            {
                'type': 'xss',
                'severity': 'high',
                'pattern': re.compile(r'print\s+\$_(?:GET|POST|REQUEST|COOKIE)', re.IGNORECASE),
                'message': 'Potential XSS through print statement',
                'description': 'Direct printing of user input without sanitization',
                'remediation': 'Use htmlspecialchars() to encode special characters',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # File inclusion vulnerabilities
            {
                'type': 'file_inclusion',
                'severity': 'critical',
                'pattern': re.compile(r'(?:include|require)(?:_once)?\s*\(\s*\$_(?:GET|POST|REQUEST)', re.IGNORECASE),
                'message': 'Potential Local/Remote File Inclusion vulnerability',
                'description': 'Including files based on user input without validation',
                'remediation': 'Validate and whitelist allowed file paths. Use absolute paths.',
                'cwe_id': 'CWE-98',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # Command injection
            {
                'type': 'command_injection',
                'severity': 'critical',
                'pattern': re.compile(r'(?:system|exec|shell_exec|passthru|popen)\s*\([^)]*\$_(?:GET|POST|REQUEST)', re.IGNORECASE),
                'message': 'Potential Command Injection vulnerability',
                'description': 'Executing system commands with user input',
                'remediation': 'Avoid executing system commands. If necessary, use escapeshellarg() and validate input.',
                'cwe_id': 'CWE-78',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # Weak cryptography
            {
                'type': 'weak_crypto',
                'severity': 'medium',
                'pattern': re.compile(r'\b(?:md5|sha1)\s*\(', re.IGNORECASE),
                'message': 'Weak cryptographic algorithm detected',
                'description': 'MD5 and SHA1 are cryptographically weak and should not be used for security purposes',
                'remediation': 'Use stronger algorithms like SHA-256, SHA-3, or bcrypt for password hashing',
                'cwe_id': 'CWE-327',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },
            
            # Insecure random
            {
                'type': 'weak_random',
                'severity': 'medium',
                'pattern': re.compile(r'\b(?:rand|mt_rand|srand|mt_srand)\s*\(', re.IGNORECASE),
                'message': 'Weak random number generation',
                'description': 'Using predictable random number generators for security purposes',
                'remediation': 'Use random_bytes() or random_int() for cryptographically secure randomness',
                'cwe_id': 'CWE-338',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },
            
            # Sensitive data exposure
            {
                'type': 'info_disclosure',
                'severity': 'medium',
                'pattern': re.compile(r'(?:phpinfo|var_dump|print_r)\s*\(', re.IGNORECASE),
                'message': 'Potential information disclosure',
                'description': 'Functions that may expose sensitive information in production',
                'remediation': 'Remove debug functions from production code',
                'cwe_id': 'CWE-200',
                'owasp_category': 'A01:2021 – Broken Access Control'
            },
            
            # Unsafe deserialization
            {
                'type': 'deserialization',
                'severity': 'high',
                'pattern': re.compile(r'unserialize\s*\(\s*\$_(?:GET|POST|REQUEST|COOKIE)', re.IGNORECASE),
                'message': 'Unsafe deserialization of user input',
                'description': 'Deserializing untrusted data can lead to code execution',
                'remediation': 'Validate and sanitize data before deserialization, or use JSON instead',
                'cwe_id': 'CWE-502',
                'owasp_category': 'A08:2021 – Software and Data Integrity Failures'
            }
        ]
    
    def get_all_rules(self):
        return self.rules

class JSVulnerabilityRules:
    def __init__(self):
        self.rules = self._initialize_rules()
    
    def _initialize_rules(self):
        return [
            # DOM-based XSS
            {
                'type': 'dom_xss',
                'severity': 'high',
                'pattern': re.compile(r'\.innerHTML\s*=\s*[^;]*(?:location\.search|window\.location|document\.URL)', re.IGNORECASE),
                'message': 'Potential DOM-based XSS vulnerability',
                'description': 'Setting innerHTML with unsanitized user-controlled data',
                'remediation': 'Use textContent instead of innerHTML, or sanitize the data with DOMPurify',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # eval usage
            {
                'type': 'code_injection',
                'severity': 'critical',
                'pattern': re.compile(r'\beval\s*\(', re.IGNORECASE),
                'message': 'Use of eval() function detected',
                'description': 'eval() can execute arbitrary code and is dangerous',
                'remediation': 'Avoid using eval(). Use JSON.parse() for JSON or refactor the code',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # setTimeout/setInterval with strings
            {
                'type': 'code_injection',
                'severity': 'high',
                'pattern': re.compile(r'(?:setTimeout|setInterval)\s*\(\s*[\'"][^\'"]*[\'"]\s*,', re.IGNORECASE),
                'message': 'setTimeout/setInterval with string argument',
                'description': 'Using string arguments with setTimeout can lead to code injection',
                'remediation': 'Use function references instead of string arguments',
                'cwe_id': 'CWE-94',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # Document.write with user input
            {
                'type': 'xss',
                'severity': 'high',
                'pattern': re.compile(r'document\.write\s*\([^)]*(?:location\.search|window\.location|document\.URL)', re.IGNORECASE),
                'message': 'document.write() with user-controlled data',
                'description': 'Using document.write with untrusted data can lead to XSS',
                'remediation': 'Use DOM manipulation methods instead of document.write and sanitize user input',
                'cwe_id': 'CWE-79',
                'owasp_category': 'A03:2021 – Injection'
            },
            
            # Weak crypto
            {
                'type': 'weak_crypto',
                'severity': 'medium',
                'pattern': re.compile(r'Math\.random\s*\(\s*\)', re.IGNORECASE),
                'message': 'Weak random number generation',
                'description': 'Math.random() is not cryptographically secure',
                'remediation': 'Use crypto.getRandomValues() for cryptographically secure randomness',
                'cwe_id': 'CWE-338',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },
            
            # Console.log in production
            {
                'type': 'info_disclosure',
                'severity': 'low',
                'pattern': re.compile(r'console\.(?:log|debug|info|warn|error)', re.IGNORECASE),
                'message': 'Console logging detected',
                'description': 'Console statements may expose sensitive information in production',
                'remediation': 'Remove console statements from production code',
                'cwe_id': 'CWE-200',
                'owasp_category': 'A09:2021 – Security Logging and Monitoring Failures'
            },
            
            # localStorage/sessionStorage with sensitive data
            {
                'type': 'data_exposure',
                'severity': 'medium',
                'pattern': re.compile(r'(?:localStorage|sessionStorage)\.setItem\s*\([^)]*(?:password|token|key|secret)', re.IGNORECASE),
                'message': 'Storing sensitive data in browser storage',
                'description': 'Sensitive data in localStorage/sessionStorage can be accessed by other scripts',
                'remediation': 'Avoid storing sensitive data client-side. Use secure HTTP-only cookies instead',
                'cwe_id': 'CWE-922',
                'owasp_category': 'A02:2021 – Cryptographic Failures'
            },
            
            # Unsafe URL construction
            {
                'type': 'open_redirect',
                'severity': 'medium',
                'pattern': re.compile(r'window\.location(?:\.href)?\s*=\s*[^;]*(?:location\.search|window\.location)', re.IGNORECASE),
                'message': 'Potential open redirect vulnerability',
                'description': 'Redirecting to user-controlled URLs can be abused for phishing',
                'remediation': 'Validate and whitelist redirect URLs',
                'cwe_id': 'CWE-601',
                'owasp_category': 'A01:2021 – Broken Access Control'
            },
            
            # postMessage without origin check
            {
                'type': 'message_handling',
                'severity': 'medium',
                'pattern': re.compile(r'window\.addEventListener\s*\(\s*[\'"]message[\'"]\s*,.*\)\s*;(?![^}]*origin)', re.IGNORECASE | re.DOTALL),
                'message': 'postMessage listener without origin validation',
                'description': 'Message listeners should validate the origin of incoming messages',
                'remediation': 'Check event.origin before processing postMessage data',
                'cwe_id': 'CWE-346',
                'owasp_category': 'A07:2021 – Identification and Authentication Failures'
            }
        ]
    
    def get_all_rules(self):
        return self.rules
